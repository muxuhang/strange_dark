{"version":3,"sources":["webpack:///./src/pages/TableDrag.js"],"names":["TableDrag","tbodyRef","useRef","useState","currentKey","setCurrentKey","title","sort","list","moveKey","setMoveKey","onDragEnd","a","result","console","log","splice","onDragStart","e","target","id","style","borderTop","borderBottom","ref","onDragOver","parentNode","preventDefault","map","item","index","key","cursor","background","height","draggable"],"mappings":"4OAwEeA,UAhEG,WAChB,IAAMC,EAAWC,mBACjB,EAAoCC,mBAAS,MAAtCC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,CAC/B,CAAEG,MAAO,KAAMC,KAAM,GACrB,CAAED,MAAO,KAAMC,KAAM,GACrB,CAAED,MAAO,KAAMC,KAAM,GACrB,CAAED,MAAO,KAAMC,KAAM,GACrB,CAAED,MAAO,KAAMC,KAAM,KALhBC,EAAP,KAMA,GANA,KAM8BL,mBAAS,OAAhCM,EAAP,KAAgBC,EAAhB,KACMC,EAAS,uCAAG,4BAAAC,EAAA,sDACVC,EADU,YACGL,GAEnBM,QAAQC,IAAIF,EAAOG,OAAOZ,IAE1BU,QAAQC,IAAIF,GACZR,EAAc,MACdK,EAAW,MAPK,2CAAH,qDAaTO,EAAc,SAACC,GACnBb,EAAca,EAAEC,OAAOC,KAEnBC,EAAQjB,GAAcK,EAAU,CACpCa,UAAW,mBACT,CACFC,aAAc,mBAEhB,OACE,kBAAC,IAAD,CAAQjB,MAAO,aACb,+BACE,+BACE,4BACE,kCACA,kCACA,sCAGJ,2BAAOkB,IAAKvB,EAAUwB,WAtBT,SAACP,GAElB,OADAR,EAAWQ,EAAEC,OAAOO,WAAWN,IACxBF,EAAES,mBAqBFnB,EAAKoB,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBACzBC,IAAKD,EACLV,GAAIU,EACJT,MAAK,eACHW,OAAQ,OACRC,WAAY,OACZC,OAAQ,IACJzB,GAAWqB,GAAS1B,GAAcK,GAAyB,MAAdL,GAAiC,MAAXK,EAAmBY,EAAQ,IAEpGc,WAAW,EACXxB,UAAWA,EACXM,YAAaA,GACb,4BAAKa,EAAQ,GACb,4BAAKD,EAAKvB,OACV,8C","file":"component---src-pages-table-drag-js-cac8c94515339bc5b6af.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport Layout from \"../components/layout\"\nimport 'react-quill/dist/quill.snow.css';\nimport 'katex/dist/katex.css';\nimport './../components/quill/quill.css';\n// 功能\n// 1、只能竖直方向移动\n// 2、移动时显示插入位置\nconst TableDrag = () => {\n  const tbodyRef = useRef()\n  const [currentKey, setCurrentKey] = useState(null)\n  const [list, setList] = useState([\n    { title: '济南', sort: 1 },\n    { title: '青岛', sort: 2 },\n    { title: '烟台', sort: 3 },\n    { title: '菏泽', sort: 4 },\n    { title: '德州', sort: 5 }])\n  const [moveKey, setMoveKey] = useState(null)\n  const onDragEnd = async () => {\n    const result = [...list]\n    // result[currentKey] = result.splice(moveKey, 0, result[currentKey])[0]\n    console.log(result.splice(currentKey,));\n    // setList(list)\n    console.log(result);\n    setCurrentKey(null)\n    setMoveKey(null)\n  }\n  const onDragOver = (e) => {\n    setMoveKey(e.target.parentNode.id)\n    return e.preventDefault()\n  }\n  const onDragStart = (e) => {\n    setCurrentKey(e.target.id)\n  }\n  const style = currentKey >= moveKey ? {\n    borderTop: '2px dashed #999',\n  } : {\n    borderBottom: '2px dashed #999',\n  }\n  return (\n    <Layout title={'TableDrag'}>\n      <table>\n        <thead>\n          <tr>\n            <td>序号</td>\n            <td>标题</td>\n            <td>创建时间</td>\n          </tr>\n        </thead>\n        <tbody ref={tbodyRef} onDragOver={onDragOver}>\n          {list.map((item, index) => <tr\n            key={index}\n            id={index}\n            style={{\n              cursor: 'move',\n              background: \"#fff\",\n              height: 40,\n              ...(moveKey == index && currentKey != moveKey && currentKey != null && moveKey != null) ? style : {}\n            }}\n            draggable={true}\n            onDragEnd={onDragEnd}\n            onDragStart={onDragStart}>\n            <td>{index + 1}</td>\n            <td>{item.title}</td>\n            <td>-----</td>\n          </tr>)}\n        </tbody>\n      </table>\n    </Layout >\n  )\n}\n\nexport default TableDrag\n"],"sourceRoot":""}