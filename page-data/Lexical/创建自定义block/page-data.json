{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lexical/创建自定义block/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"1226d020-0a77-5610-81e7-d57e3a4ef85b","excerpt":"版本号 editor.jsx BlockDemoPlugin.ts BlockDemoNode.tsx 使用","html":"<h4>版本号</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string-property property\">\"@lexical/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.10.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"lexical\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.10.0\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4>editor.jsx</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nodes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>BlockDemo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TableContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SharedAutocompleteContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlockDemoPlugin</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SharedAutocompleteContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TableContext</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>BlockDemoPlugin.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createCommand <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lexical\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLexicalComposerContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@lexical/react/LexicalComposerContext\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> $insertNodeToNearestRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@lexical/utils\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> $insertNodes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../lexical/src\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> $createBlockDemoNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./BlockDemoNode\"</span>\n\ntype CommandPayload <span class=\"token operator\">=</span> string\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">INSERT_BLOCKDEMO_COMMAND</span><span class=\"token operator\">:</span> LexicalCommand<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CommandPayload</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = createCommand(\n  \"INSERT_BLOCKDEMO_COMMAND\"\n)\nexport function BlockDemoPlugin(): ReactNode </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>editor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLexicalComposerContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Similar with command listener, which returns unlisten callback</span>\n    <span class=\"token keyword\">const</span> removeListener <span class=\"token operator\">=</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>\n      <span class=\"token constant\">INSERT_BLOCKDEMO_COMMAND</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">payload</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">$createBlockDemoNode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">$insertNodeToNearestRoot</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>editor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>BlockDemoNode.tsx</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LexicalEditor<span class=\"token punctuation\">,</span> LexicalNode<span class=\"token punctuation\">,</span> TextNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lexical'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>  SerializedTextNode<span class=\"token punctuation\">,</span> DOMConversionMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lexical'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertBlockDemoElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">domNode</span><span class=\"token operator\">:</span> Node</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> DOMConversionOutput <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>domNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> domNode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">$createBlockDemoNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockDemoNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TextNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">__text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'blockdemo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> BlockDemoNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BlockDemoNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockDemoNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>__text<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>__key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> key<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NodeKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">importJSON</span><span class=\"token punctuation\">(</span>serializedNode<span class=\"token operator\">:</span> SerializedTextNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BlockDemoNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> serializedNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">$createImageNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      text<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nestedEditor <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>__caption<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> editorState <span class=\"token operator\">=</span> nestedEditor<span class=\"token punctuation\">.</span><span class=\"token function\">parseEditorState</span><span class=\"token punctuation\">(</span>caption<span class=\"token punctuation\">.</span>editorState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>editorState<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nestedEditor<span class=\"token punctuation\">.</span><span class=\"token function\">setEditorState</span><span class=\"token punctuation\">(</span>editorState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">exportJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SerializedTextNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__text\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createDOM</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> EditorConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// span.style.textEmphasis = 'dot #333';</span>\n    <span class=\"token comment\">// span.style.textEmphasisPosition = 'under';</span>\n    <span class=\"token keyword\">return</span> span<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">updateDOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">importDOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DOMConversionMap <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">div</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> Node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">conversion</span><span class=\"token operator\">:</span> convertBlockDemoElement<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>editor<span class=\"token operator\">:</span> LexicalEditor<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">$createBlockDemoNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BlockDemoNode <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockDemoNode</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">$isBlockDemoNode</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> LexicalNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> node is BlockDemoNode <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> node <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BlockDemoNode</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>使用</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"demo\"</span>\neditor<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchCommand</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INSERT_BLOCKDEMO_COMMAND</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"lexical 创建自定义块","date":"May 04, 2023","description":"lexical block 基本插入"}}},"pageContext":{"slug":"/Lexical/创建自定义block/","previous":{"fields":{"slug":"/ReactNative/自定义全局组件/"},"frontmatter":{"title":"RN 自定义全局组件"}},"next":{"fields":{"slug":"/Echarts/echarts南丁格尔饼图适配/"},"frontmatter":{"title":"echarts pie 饼图"}}}},"staticQueryHashes":["1246554614","2841359383"]}